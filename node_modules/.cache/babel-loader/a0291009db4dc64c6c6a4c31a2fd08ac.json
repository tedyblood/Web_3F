{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nconst elementToComponent = {\n  svg: 'Svg',\n  circle: 'Circle',\n  clipPath: 'ClipPath',\n  ellipse: 'Ellipse',\n  g: 'G',\n  linearGradient: 'LinearGradient',\n  radialGradient: 'RadialGradient',\n  line: 'Line',\n  path: 'Path',\n  pattern: 'Pattern',\n  polygon: 'Polygon',\n  polyline: 'Polyline',\n  rect: 'Rect',\n  symbol: 'Symbol',\n  text: 'Text',\n  textPath: 'TextPath',\n  tspan: 'TSpan',\n  use: 'Use',\n  defs: 'Defs',\n  stop: 'Stop',\n  mask: 'Mask',\n  image: 'Image'\n};\n\nconst expoPrefix = (component, expo) => {\n  // Prefix with 'Svg.' in the case we're transforming for Expo\n  if (!expo) {\n    return component;\n  }\n\n  return (component !== 'Svg' ? 'Svg.' : '') + component;\n};\n\nconst plugin = ({\n  types: t\n}, {\n  expo\n}) => {\n  function replaceElement(path, state) {\n    const name = path.node.openingElement.name.name; // Replace element by react-native-svg components\n\n    const component = elementToComponent[name];\n\n    if (component) {\n      const prefixedComponent = expoPrefix(component, expo);\n      const openingElementName = path.get('openingElement.name');\n      openingElementName.replaceWith(t.jsxIdentifier(prefixedComponent));\n\n      if (path.has('closingElement')) {\n        const closingElementName = path.get('closingElement.name');\n        closingElementName.replaceWith(t.jsxIdentifier(prefixedComponent));\n      }\n\n      state.replacedComponents.add(prefixedComponent);\n      return;\n    } // Remove element if not supported\n\n\n    state.unsupportedComponents.add(name);\n    path.remove();\n  }\n\n  const svgElementVisitor = {\n    JSXElement(path, state) {\n      if (!path.get('openingElement.name').isJSXIdentifier({\n        name: 'svg'\n      })) {\n        return;\n      }\n\n      replaceElement(path, state);\n      path.traverse(jsxElementVisitor, state);\n    }\n\n  };\n  const jsxElementVisitor = {\n    JSXElement(path, state) {\n      replaceElement(path, state);\n    }\n\n  };\n  const importDeclarationVisitor = {\n    ImportDeclaration(path, state) {\n      if (path.get('source').isStringLiteral({\n        value: 'react-native-svg'\n      })) {\n        state.replacedComponents.forEach(component => {\n          if (path.get('specifiers').some(specifier => specifier.get('local').isIdentifier({\n            name: component\n          }))) {\n            return;\n          }\n\n          path.pushContainer('specifiers', t.importSpecifier(t.identifier(component), t.identifier(component)));\n        });\n      } else if (path.get('source').isStringLiteral({\n        value: 'expo'\n      })) {\n        path.pushContainer('specifiers', t.importSpecifier(t.identifier('Svg'), t.identifier('Svg')));\n      } else {\n        return;\n      }\n\n      if (state.unsupportedComponents.size && !path.has('trailingComments')) {\n        const componentList = [...state.unsupportedComponents].join(', ');\n        path.addComment('trailing', \" SVGR has dropped some elements not supported by react-native-svg: \".concat(componentList, \" \"));\n      }\n    }\n\n  };\n  return {\n    visitor: {\n      Program(path, state) {\n        state.replacedComponents = new Set();\n        state.unsupportedComponents = new Set();\n        path.traverse(svgElementVisitor, state);\n        path.traverse(importDeclarationVisitor, state);\n      }\n\n    }\n  };\n};\n\nvar _default = plugin;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}