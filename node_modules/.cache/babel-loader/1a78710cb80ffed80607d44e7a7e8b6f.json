{"ast":null,"code":"'use strict';\n\nvar html = require('property-information/html');\n\nvar svg = require('property-information/svg');\n\nvar find = require('property-information/find');\n\nvar ns = require('web-namespaces');\n\nvar s = require('hastscript/svg');\n\nvar h = require('hastscript');\n\nvar xtend = require('xtend');\n\nvar count = require('ccount');\n\nmodule.exports = wrapper;\nvar own = {}.hasOwnProperty;\n/* Handlers. */\n\nvar map = {\n  '#document': root,\n  '#document-fragment': root,\n  '#text': text,\n  '#comment': comment,\n  '#documentType': doctype\n  /* Wrapper to normalise options. */\n\n};\n\nfunction wrapper(ast, options) {\n  var settings = options || {};\n  var file;\n\n  if (settings.messages) {\n    file = settings;\n    settings = {};\n  } else {\n    file = settings.file;\n  }\n\n  return transform(ast, {\n    schema: settings.space === 'svg' ? svg : html,\n    file: file,\n    verbose: settings.verbose,\n    location: false\n  });\n}\n/* Transform a node. */\n\n\nfunction transform(ast, config) {\n  var schema = config.schema;\n  var fn = own.call(map, ast.nodeName) ? map[ast.nodeName] : element;\n  var children;\n  var node;\n  var pos;\n\n  if (fn === element) {\n    config.schema = ast.namespaceURI === ns.svg ? svg : html;\n  }\n\n  if (ast.childNodes) {\n    children = nodes(ast.childNodes, config);\n  }\n\n  node = fn(ast, children, config);\n\n  if (ast.sourceCodeLocation && config.file) {\n    pos = location(node, ast.sourceCodeLocation, config);\n\n    if (pos) {\n      config.location = true;\n      node.position = pos;\n    }\n  }\n\n  config.schema = schema;\n  return node;\n}\n/* Transform children. */\n\n\nfunction nodes(children, config) {\n  var length = children.length;\n  var index = -1;\n  var result = [];\n\n  while (++index < length) {\n    result[index] = transform(children[index], config);\n  }\n\n  return result;\n}\n/* Transform a document.\n * Stores `ast.quirksMode` in `node.data.quirksMode`. */\n\n\nfunction root(ast, children, config) {\n  var node = {\n    type: 'root',\n    children: children,\n    data: {}\n  };\n  var doc;\n  node.data.quirksMode = ast.mode === 'quirks' || ast.mode === 'limited-quirks';\n\n  if (config.file && config.location) {\n    doc = String(config.file);\n    node.position = {\n      start: {\n        line: 1,\n        column: 1,\n        offset: 0\n      },\n      end: {\n        line: count(doc, '\\n') + 1,\n        column: doc.length - doc.lastIndexOf('\\n'),\n        offset: doc.length\n      }\n    };\n  }\n\n  return node;\n}\n/* Transform a doctype. */\n\n\nfunction doctype(ast) {\n  return {\n    type: 'doctype',\n    name: ast.name || '',\n    public: ast.publicId || null,\n    system: ast.systemId || null\n  };\n}\n/* Transform a text. */\n\n\nfunction text(ast) {\n  return {\n    type: 'text',\n    value: ast.value\n  };\n}\n/* Transform a comment. */\n\n\nfunction comment(ast) {\n  return {\n    type: 'comment',\n    value: ast.data\n  };\n}\n/* Transform an element. */\n\n\nfunction element(ast, children, config) {\n  var fn = config.schema.space === 'svg' ? s : h;\n  var name = ast.tagName;\n  var attributes = ast.attrs;\n  var length = attributes.length;\n  var props = {};\n  var index = -1;\n  var attribute;\n  var prop;\n  var node;\n  var pos;\n  var start;\n  var end;\n\n  while (++index < length) {\n    attribute = attributes[index];\n    prop = (attribute.prefix ? attribute.prefix + ':' : '') + attribute.name;\n    props[prop] = attribute.value;\n  }\n\n  node = fn(name, props, children);\n\n  if (name === 'template' && 'content' in ast) {\n    pos = ast.sourceCodeLocation;\n    start = pos && pos.startTag && position(pos.startTag).end;\n    end = pos && pos.endTag && position(pos.endTag).start;\n    node.content = transform(ast.content, config);\n\n    if ((start || end) && config.file) {\n      node.content.position = {\n        start: start,\n        end: end\n      };\n    }\n  }\n\n  return node;\n}\n/* Create clean positional information. */\n\n\nfunction location(node, location, config) {\n  var schema = config.schema;\n  var verbose = config.verbose;\n  var pos = position(location);\n  var reference;\n  var attributes;\n  var attribute;\n  var props;\n  var prop;\n\n  if (node.type === 'element') {\n    reference = node.children[node.children.length - 1];\n    /* Unclosed with children (upstream: https://github.com/inikulin/parse5/issues/109) */\n\n    if (!location.endTag && reference && reference.position && reference.position.end) {\n      pos.end = xtend(reference.position.end);\n    }\n\n    if (verbose) {\n      attributes = location.attrs;\n      props = {};\n\n      for (attribute in attributes) {\n        prop = find(schema, attribute).property;\n        props[prop] = position(attributes[attribute]);\n      }\n\n      node.data = {\n        position: {\n          opening: position(location.startTag),\n          closing: location.endTag ? position(location.endTag) : null,\n          properties: props\n        }\n      };\n    }\n  }\n\n  return pos;\n}\n\nfunction position(loc) {\n  var start = point({\n    line: loc.startLine,\n    column: loc.startCol,\n    offset: loc.startOffset\n  });\n  var end = point({\n    line: loc.endLine,\n    column: loc.endCol,\n    offset: loc.endOffset\n  });\n  return start || end ? {\n    start: start,\n    end: end\n  } : null;\n}\n\nfunction point(point) {\n  return point.line && point.column ? point : null;\n}","map":null,"metadata":{},"sourceType":"script"}