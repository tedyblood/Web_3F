{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.getPlugins = getPlugins;\nexports.resolvePlugin = resolvePlugin;\nexports.loadPlugin = loadPlugin;\n\nvar _pluginJsx = _interopRequireDefault(require(\"@svgr/plugin-jsx\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst DEFAULT_PLUGINS = [_pluginJsx.default];\n\nfunction getPlugins(config, state) {\n  if (config.plugins) {\n    return config.plugins;\n  }\n\n  if (state.caller && state.caller.defaultPlugins) {\n    return state.caller.defaultPlugins;\n  }\n\n  return DEFAULT_PLUGINS;\n}\n\nfunction resolvePlugin(plugin) {\n  if (typeof plugin === 'function') {\n    return plugin;\n  }\n\n  if (typeof plugin === 'string') {\n    return loadPlugin(plugin);\n  }\n\n  throw new Error(\"Invalid plugin \\\"\".concat(plugin, \"\\\"\"));\n}\n\nconst pluginCache = {};\n\nfunction loadPlugin(moduleName) {\n  if (pluginCache[moduleName]) {\n    return pluginCache[moduleName];\n  }\n\n  try {\n    // eslint-disable-next-line\n    const plugin = require(moduleName);\n\n    if (!plugin.default || !plugin) {\n      throw new Error(\"Invalid plugin \\\"\".concat(moduleName, \"\\\"\"));\n    }\n\n    pluginCache[moduleName] = plugin.default || plugin;\n    return pluginCache[moduleName];\n  } catch (error) {\n    throw new Error(\"Module \\\"\".concat(moduleName, \"\\\" missing. Maybe `npm install \").concat(moduleName, \"` could help!\"));\n  }\n}","map":null,"metadata":{},"sourceType":"script"}