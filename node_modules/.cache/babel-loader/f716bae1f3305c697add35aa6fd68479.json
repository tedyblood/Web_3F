{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nvar _util = require(\"./util\");\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n} // Inspired by https://github.com/reactjs/react-magic/blob/master/src/htmltojsx.js\n\n/**\n * Determines if the CSS value can be converted from a\n * 'px' suffixed string to a numeric value.\n *\n * @param {string} value CSS property value\n * @return {boolean}\n */\n\n\nfunction isConvertiblePixelValue(value) {\n  return /^\\d+px$/.test(value);\n}\n/**\n * Format style key into JSX style object key.\n *\n * @param {string} key\n * @return {string}\n */\n\n\nfunction formatKey(key) {\n  key = key.toLowerCase(); // Don't capitalize -ms- prefix\n\n  if (/^-ms-/.test(key)) key = key.substr(1);\n  return t.identifier((0, _util.hyphenToCamelCase)(key));\n}\n/**\n * Format style value into JSX style object value.\n *\n * @param {string} key\n * @return {string}\n */\n\n\nfunction formatValue(value) {\n  if ((0, _util.isNumeric)(value)) return t.numericLiteral(Number(value));\n  if (isConvertiblePixelValue(value)) return t.numericLiteral(Number((0, _util.trimEnd)(value, 'px')));\n  return t.stringLiteral(value);\n}\n/**\n * Handle parsing of inline styles.\n *\n * @param {string} rawStyle\n * @returns {object}\n */\n\n\nfunction stringToObjectStyle(rawStyle) {\n  const entries = rawStyle.split(';');\n  const properties = [];\n  let index = -1;\n\n  while (++index < entries.length) {\n    const entry = entries[index];\n    const style = entry.trim();\n    const firstColon = style.indexOf(':');\n    const value = style.substr(firstColon + 1).trim();\n    const key = style.substr(0, firstColon);\n\n    if (key !== '') {\n      const property = t.objectProperty(formatKey(key), formatValue(value));\n      properties.push(property);\n    }\n  }\n\n  return t.objectExpression(properties);\n}\n\nvar _default = stringToObjectStyle;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}