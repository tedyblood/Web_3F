{"ast":null,"code":"//      \n'use strict';\n\nconst os = require('os');\n\nconst createExplorer = require('./createExplorer');\n\nconst loaders = require('./loaders');\n\nmodule.exports = cosmiconfig;\n\nfunction cosmiconfig(moduleName, options) {\n  options = options || {};\n  const defaults = {\n    packageProp: moduleName,\n    searchPlaces: ['package.json', \".\".concat(moduleName, \"rc\"), \".\".concat(moduleName, \"rc.json\"), \".\".concat(moduleName, \"rc.yaml\"), \".\".concat(moduleName, \"rc.yml\"), \".\".concat(moduleName, \"rc.js\"), \"\".concat(moduleName, \".config.js\")],\n    ignoreEmptySearchPlaces: true,\n    stopDir: os.homedir(),\n    cache: true,\n    transform: identity\n  };\n  const normalizedOptions = Object.assign({}, defaults, options, {\n    loaders: normalizeLoaders(options.loaders)\n  });\n  return createExplorer(normalizedOptions);\n}\n\ncosmiconfig.loadJs = loaders.loadJs;\ncosmiconfig.loadJson = loaders.loadJson;\ncosmiconfig.loadYaml = loaders.loadYaml;\n\nfunction normalizeLoaders(rawLoaders) {\n  const defaults = {\n    '.js': {\n      sync: loaders.loadJs,\n      async: loaders.loadJs\n    },\n    '.json': {\n      sync: loaders.loadJson,\n      async: loaders.loadJson\n    },\n    '.yaml': {\n      sync: loaders.loadYaml,\n      async: loaders.loadYaml\n    },\n    '.yml': {\n      sync: loaders.loadYaml,\n      async: loaders.loadYaml\n    },\n    noExt: {\n      sync: loaders.loadYaml,\n      async: loaders.loadYaml\n    }\n  };\n\n  if (!rawLoaders) {\n    return defaults;\n  }\n\n  return Object.keys(rawLoaders).reduce((result, ext) => {\n    const entry = rawLoaders && rawLoaders[ext];\n\n    if (typeof entry === 'function') {\n      result[ext] = {\n        sync: entry,\n        async: entry\n      };\n    } else {\n      result[ext] = entry;\n    }\n\n    return result;\n  }, defaults);\n}\n\nfunction identity(x) {\n  return x;\n}","map":null,"metadata":{},"sourceType":"script"}