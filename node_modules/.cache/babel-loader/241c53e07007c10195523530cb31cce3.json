{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nconst positionMethod = {\n  start: 'unshiftContainer',\n  end: 'pushContainer'\n};\n\nconst addJSXAttribute = ({\n  types: t,\n  template\n}, opts) => {\n  function getAttributeValue({\n    literal,\n    value\n  }) {\n    if (typeof value === 'boolean') {\n      return t.jsxExpressionContainer(t.booleanLiteral(value));\n    }\n\n    if (typeof value === 'number') {\n      return t.jsxExpressionContainer(t.numericLiteral(value));\n    }\n\n    if (typeof value === 'string' && literal) {\n      return t.jsxExpressionContainer(template.ast(value).expression);\n    }\n\n    if (typeof value === 'string') {\n      return t.stringLiteral(value);\n    }\n\n    return null;\n  }\n\n  function getAttribute({\n    spread,\n    name,\n    value,\n    literal\n  }) {\n    if (spread) {\n      return t.jsxSpreadAttribute(t.identifier(name));\n    }\n\n    return t.jsxAttribute(t.jsxIdentifier(name), getAttributeValue({\n      value,\n      literal\n    }));\n  }\n\n  return {\n    visitor: {\n      JSXOpeningElement(path) {\n        if (!opts.elements.includes(path.node.name.name)) return;\n        opts.attributes.forEach(({\n          name,\n          value = null,\n          spread = false,\n          literal = false,\n          position = 'end'\n        }) => {\n          const method = positionMethod[position];\n          const newAttribute = getAttribute({\n            spread,\n            name,\n            value,\n            literal\n          });\n          const attributes = path.get('attributes');\n\n          const isEqualAttribute = attribute => {\n            if (spread) {\n              return attribute.get('argument').isIdentifier({\n                name\n              });\n            }\n\n            return attribute.get('name').isJSXIdentifier({\n              name\n            });\n          };\n\n          const replaced = attributes.some(attribute => {\n            if (!isEqualAttribute(attribute)) return false;\n            attribute.replaceWith(newAttribute);\n            return true;\n          });\n\n          if (!replaced) {\n            path[method]('attributes', newAttribute);\n          }\n        });\n      }\n\n    }\n  };\n};\n\nvar _default = addJSXAttribute;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}