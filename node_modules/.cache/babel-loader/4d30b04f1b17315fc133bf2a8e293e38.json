{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.isNumeric = isNumeric;\nexports.hyphenToCamelCase = hyphenToCamelCase;\nexports.trimEnd = trimEnd;\nexports.kebabCase = kebabCase;\nexports.replaceSpaces = replaceSpaces;\n/**\n * Determines if the specified string consists entirely of numeric characters.\n *\n * @param {*} [value]\n * @returns {boolean}\n */\n\nfunction isNumeric(value) {\n  return !Number.isNaN(value - parseFloat(value));\n}\n/**\n * Convert a hyphenated string to camelCase.\n *\n * @param {string} string\n * @returns {string}\n */\n\n\nfunction hyphenToCamelCase(string) {\n  return string.replace(/-(.)/g, (match, chr) => chr.toUpperCase());\n}\n/**\n * Trim the specified substring off the string. If the string does not end\n * with the specified substring, this is a no-op.\n *\n * @param {string} haystack String to search in\n * @param {string} needle   String to search for\n * @return {string}\n */\n\n\nfunction trimEnd(haystack, needle) {\n  return haystack.endsWith(needle) ? haystack.slice(0, -needle.length) : haystack;\n}\n\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g;\n\nfunction kebabCase(str) {\n  return str.replace(KEBAB_REGEX, match => \"-\".concat(match.toLowerCase()));\n}\n\nconst SPACES_REGEXP = /[\\t\\r\\n\\u0085\\u2028\\u2029]+/g;\n\nfunction replaceSpaces(str) {\n  return str.replace(SPACES_REGEXP, ' ');\n}","map":null,"metadata":{},"sourceType":"script"}