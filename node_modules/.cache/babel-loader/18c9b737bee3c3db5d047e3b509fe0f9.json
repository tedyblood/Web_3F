{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.resolveConfig = resolveConfig;\nexports.resolveConfigFile = resolveConfigFile;\nexports.loadConfig = loadConfig;\nexports.DEFAULT_CONFIG = void 0;\n\nvar _cosmiconfig = _interopRequireDefault(require(\"cosmiconfig\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nconst DEFAULT_CONFIG = {\n  h2xConfig: null,\n  dimensions: true,\n  expandProps: 'end',\n  icon: false,\n  native: false,\n  prettier: true,\n  prettierConfig: null,\n  ref: false,\n  replaceAttrValues: null,\n  svgProps: null,\n  svgo: true,\n  svgoConfig: null,\n  template: null,\n  titleProp: false,\n  runtimeConfig: true,\n  plugins: null\n};\nexports.DEFAULT_CONFIG = DEFAULT_CONFIG;\nconst explorer = (0, _cosmiconfig.default)('svgr', {\n  sync: true,\n  cache: true,\n  rcExtensions: true\n});\n\nasync function resolveConfig(searchFrom, configFile) {\n  if (configFile == null) {\n    const result = await explorer.search(searchFrom);\n    return result ? result.config : null;\n  }\n\n  const result = await explorer.load(configFile);\n  return result ? result.config : null;\n}\n\nresolveConfig.sync = (searchFrom, configFile) => {\n  if (configFile == null) {\n    const result = explorer.searchSync(searchFrom);\n    return result ? result.config : null;\n  }\n\n  const result = explorer.loadSync(configFile);\n  return result ? result.config : null;\n};\n\nasync function resolveConfigFile(filePath) {\n  const result = await explorer.search(filePath);\n  return result ? result.filepath : null;\n}\n\nresolveConfigFile.sync = filePath => {\n  const result = explorer.searchSync(filePath);\n  return result ? result.filepath : null;\n};\n\nasync function loadConfig(_ref, state = {}) {\n  let configFile = _ref.configFile,\n      baseConfig = _objectWithoutPropertiesLoose(_ref, [\"configFile\"]);\n\n  const rcConfig = state.filePath && baseConfig.runtimeConfig !== false ? await resolveConfig(state.filePath, configFile) : {};\n  return _extends({}, DEFAULT_CONFIG, rcConfig, baseConfig);\n}\n\nloadConfig.sync = (_ref2, state = {}) => {\n  let configFile = _ref2.configFile,\n      baseConfig = _objectWithoutPropertiesLoose(_ref2, [\"configFile\"]);\n\n  const rcConfig = state.filePath && baseConfig.runtimeConfig !== false ? resolveConfig.sync(state.filePath, configFile) : {};\n  return _extends({}, DEFAULT_CONFIG, rcConfig, baseConfig);\n};","map":null,"metadata":{},"sourceType":"script"}